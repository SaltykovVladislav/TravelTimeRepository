// <auto-generated />
using System;
using DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(TravelTimeContext))]
    partial class TravelTimeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<int>("Idcategory")
                        .HasColumnType("int")
                        .HasColumnName("IDCategory");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idcategory");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ContactListPm", b =>
                {
                    b.Property<int>("Idusers2")
                        .HasColumnType("int")
                        .HasColumnName("IDUsers2");

                    b.Property<int>("Idusers")
                        .HasColumnType("int")
                        .HasColumnName("IDUsers");

                    b.Property<DateTime?>("LastContact")
                        .HasColumnType("datetime");

                    b.Property<bool>("OnlineStatus")
                        .HasColumnType("bit");

                    b.HasKey("Idusers2", "Idusers");

                    b.HasIndex("Idusers");

                    b.ToTable("ContactListPM", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("Idgroup")
                        .HasColumnType("int")
                        .HasColumnName("IDGroup");

                    b.Property<int>("Idcreator")
                        .HasColumnType("int")
                        .HasColumnName("IDCreator");

                    b.Property<bool>("IsComplected")
                        .HasColumnType("bit");

                    b.Property<int?>("Maxnumber")
                        .HasColumnType("int")
                        .HasColumnName("MAXNumber");

                    b.Property<int?>("Minnumber")
                        .HasColumnType("int")
                        .HasColumnName("MINNumber");

                    b.Property<string>("NameGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Idgroup")
                        .HasName("PK_Group2");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MessageGroup", b =>
                {
                    b.Property<int>("Idgroup")
                        .HasColumnType("int")
                        .HasColumnName("IDGroup");

                    b.Property<int>("Idmessage")
                        .HasColumnType("int")
                        .HasColumnName("IDMessage");

                    b.Property<DateOnly>("DateOut")
                        .HasColumnType("date");

                    b.Property<int>("Idaddressee")
                        .HasColumnType("int")
                        .HasColumnName("IDAddressee");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TiTleMessage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeOnly>("TimeOut")
                        .HasColumnType("time");

                    b.HasKey("Idgroup", "Idmessage");

                    b.ToTable("MessageGroup", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MessageListPm", b =>
                {
                    b.Property<int>("Idmessage")
                        .HasColumnType("int")
                        .HasColumnName("IDMessage");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Idaddressee")
                        .HasColumnType("int")
                        .HasColumnName("IDAddressee");

                    b.Property<int>("Idaddresser")
                        .HasColumnType("int")
                        .HasColumnName("IDAddresser");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TiTle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("Idmessage")
                        .HasName("PK_MessageListPM_1");

                    b.HasIndex("Idaddressee");

                    b.HasIndex("Idaddresser");

                    b.ToTable("MessageListPM", (string)null);
                });

            modelBuilder.Entity("Domain.Models.News", b =>
                {
                    b.Property<int>("Idnews")
                        .HasColumnType("int")
                        .HasColumnName("IDNews");

                    b.Property<string>("ContentNews")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Idcategory")
                        .HasColumnType("int")
                        .HasColumnName("IDCategory");

                    b.Property<int>("Idcreator")
                        .HasColumnType("int")
                        .HasColumnName("IDCreator");

                    b.Property<string>("NameNews")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Rating10")
                        .HasColumnType("int");

                    b.HasKey("Idnews");

                    b.HasIndex("Idcategory");

                    b.ToTable("NEWS", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Point", b =>
                {
                    b.Property<int>("Idpoint")
                        .HasColumnType("int")
                        .HasColumnName("IDPoint");

                    b.Property<string>("NamePoint")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Rating10")
                        .HasColumnType("float");

                    b.HasKey("Idpoint");

                    b.ToTable("Point", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PreferencesUser", b =>
                {
                    b.Property<int>("Idpreferences")
                        .HasColumnType("int")
                        .HasColumnName("IDPreferences");

                    b.Property<string>("Preferences")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idpreferences");

                    b.ToTable("PreferencesUsers");
                });

            modelBuilder.Entity("Domain.Models.RatingNewsUser", b =>
                {
                    b.Property<int>("Idnews")
                        .HasColumnType("int")
                        .HasColumnName("IDNews");

                    b.Property<int>("Idusers")
                        .HasColumnType("int")
                        .HasColumnName("IDUsers");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Idnews");

                    b.HasIndex("Idusers");

                    b.ToTable("RatingNewsUsers");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<int>("Idrole")
                        .HasColumnType("int")
                        .HasColumnName("IDRole");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idrole");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Domain.Models.StoryVisitUser", b =>
                {
                    b.Property<int>("Idusers")
                        .HasColumnType("int")
                        .HasColumnName("IDUsers");

                    b.Property<int>("Idpoint")
                        .HasColumnType("int")
                        .HasColumnName("IDPoint");

                    b.Property<DateTime?>("DatetimeVisit")
                        .HasColumnType("datetime");

                    b.Property<int?>("Rating10")
                        .HasColumnType("int");

                    b.HasKey("Idusers", "Idpoint");

                    b.HasIndex("Idpoint");

                    b.ToTable("StoryVisitUsers");
                });

            modelBuilder.Entity("Domain.Models.Travel", b =>
                {
                    b.Property<int>("Idtravel")
                        .HasColumnType("int")
                        .HasColumnName("IDTravel");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime");

                    b.Property<int>("Idgroup")
                        .HasColumnType("int")
                        .HasColumnName("IDGroup");

                    b.Property<int>("Idway")
                        .HasColumnType("int")
                        .HasColumnName("IDWay");

                    b.Property<string>("NameTravel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idtravel");

                    b.HasIndex("Idgroup");

                    b.HasIndex("Idway");

                    b.ToTable("Travels");
                });

            modelBuilder.Entity("Domain.Models.TypePoint", b =>
                {
                    b.Property<int>("IdtypePoint")
                        .HasColumnType("int")
                        .HasColumnName("IDTypePoint");

                    b.Property<string>("TypePoint1")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("TypePoint")
                        .IsFixedLength();

                    b.HasKey("IdtypePoint");

                    b.ToTable("TypePoint", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Idusers")
                        .HasColumnType("int")
                        .HasColumnName("IDUsers");

                    b.Property<string>("FaterNameUou")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idusers");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UsersGroup", b =>
                {
                    b.Property<int>("Idgroup")
                        .HasColumnType("int")
                        .HasColumnName("IDGroup");

                    b.Property<int>("Idusers")
                        .HasColumnType("int")
                        .HasColumnName("IDUsers");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idgroup", "Idusers");

                    b.HasIndex("Idusers");

                    b.ToTable("UsersGroup", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Way", b =>
                {
                    b.Property<int>("Idway")
                        .HasColumnType("int")
                        .HasColumnName("IDWay");

                    b.Property<string>("ContentWay")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IduserCreator")
                        .HasColumnType("int")
                        .HasColumnName("IDUserCreator");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("WayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idway");

                    b.HasIndex("IduserCreator");

                    b.ToTable("Way", (string)null);
                });

            modelBuilder.Entity("ListPreferencesUser", b =>
                {
                    b.Property<int>("Idusers")
                        .HasColumnType("int")
                        .HasColumnName("IDUsers");

                    b.Property<int>("Idpreferences")
                        .HasColumnType("int")
                        .HasColumnName("IDPreferences");

                    b.HasKey("Idusers", "Idpreferences");

                    b.HasIndex("Idpreferences");

                    b.ToTable("ListPreferencesUsers", (string)null);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("Idusers")
                        .HasColumnType("int")
                        .HasColumnName("IDUsers");

                    b.Property<int>("Idrole")
                        .HasColumnType("int")
                        .HasColumnName("IDRole");

                    b.HasKey("Idusers", "Idrole");

                    b.HasIndex("Idrole");

                    b.ToTable("RoleUsers", (string)null);
                });

            modelBuilder.Entity("TypePointWay", b =>
                {
                    b.Property<int>("Idpoint")
                        .HasColumnType("int")
                        .HasColumnName("IDPoint");

                    b.Property<int>("IdtypePoint")
                        .HasColumnType("int")
                        .HasColumnName("IDTypePoint");

                    b.HasKey("Idpoint", "IdtypePoint");

                    b.HasIndex("IdtypePoint");

                    b.ToTable("TypePointWay", (string)null);
                });

            modelBuilder.Entity("WayPoint", b =>
                {
                    b.Property<int>("Idpoint")
                        .HasColumnType("int")
                        .HasColumnName("IDPoint");

                    b.Property<int>("Idway")
                        .HasColumnType("int")
                        .HasColumnName("IDWay");

                    b.HasKey("Idpoint", "Idway");

                    b.HasIndex("Idway");

                    b.ToTable("WayPoints", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ContactListPm", b =>
                {
                    b.HasOne("Domain.Models.User", "IdusersNavigation")
                        .WithMany("ContactListPmIdusersNavigations")
                        .HasForeignKey("Idusers")
                        .IsRequired()
                        .HasConstraintName("FK_ContactListPM_Users1");

                    b.HasOne("Domain.Models.User", "Idusers2Navigation")
                        .WithMany("ContactListPmIdusers2Navigations")
                        .HasForeignKey("Idusers2")
                        .IsRequired()
                        .HasConstraintName("FK_ContactListPM_Users");

                    b.Navigation("Idusers2Navigation");

                    b.Navigation("IdusersNavigation");
                });

            modelBuilder.Entity("Domain.Models.MessageGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "IdgroupNavigation")
                        .WithMany("MessageGroups")
                        .HasForeignKey("Idgroup")
                        .IsRequired()
                        .HasConstraintName("FK_MessageGroup_Group");

                    b.Navigation("IdgroupNavigation");
                });

            modelBuilder.Entity("Domain.Models.MessageListPm", b =>
                {
                    b.HasOne("Domain.Models.User", "IdaddresseeNavigation")
                        .WithMany("MessageListPmIdaddresseeNavigations")
                        .HasForeignKey("Idaddressee")
                        .IsRequired()
                        .HasConstraintName("FK_MessageListPM_Users1");

                    b.HasOne("Domain.Models.User", "IdaddresserNavigation")
                        .WithMany("MessageListPmIdaddresserNavigations")
                        .HasForeignKey("Idaddresser")
                        .IsRequired()
                        .HasConstraintName("FK_MessageListPM_Users");

                    b.Navigation("IdaddresseeNavigation");

                    b.Navigation("IdaddresserNavigation");
                });

            modelBuilder.Entity("Domain.Models.News", b =>
                {
                    b.HasOne("Domain.Models.Category", "IdcategoryNavigation")
                        .WithMany("News")
                        .HasForeignKey("Idcategory")
                        .HasConstraintName("FK_NEWS_Category");

                    b.HasOne("Domain.Models.RatingNewsUser", "IdnewsNavigation")
                        .WithOne("News")
                        .HasForeignKey("Domain.Models.News", "Idnews")
                        .IsRequired()
                        .HasConstraintName("FK_NEWS_RatingNewsUsers");

                    b.Navigation("IdcategoryNavigation");

                    b.Navigation("IdnewsNavigation");
                });

            modelBuilder.Entity("Domain.Models.RatingNewsUser", b =>
                {
                    b.HasOne("Domain.Models.User", "IdusersNavigation")
                        .WithMany("RatingNewsUsers")
                        .HasForeignKey("Idusers")
                        .IsRequired()
                        .HasConstraintName("FK_RatingNewsUsers_Users");

                    b.Navigation("IdusersNavigation");
                });

            modelBuilder.Entity("Domain.Models.StoryVisitUser", b =>
                {
                    b.HasOne("Domain.Models.Point", "IdpointNavigation")
                        .WithMany("StoryVisitUsers")
                        .HasForeignKey("Idpoint")
                        .IsRequired()
                        .HasConstraintName("FK_StoryVisitUsers_Point");

                    b.HasOne("Domain.Models.User", "IdusersNavigation")
                        .WithMany("StoryVisitUsers")
                        .HasForeignKey("Idusers")
                        .IsRequired()
                        .HasConstraintName("FK_StoryVisitUsers_Users");

                    b.Navigation("IdpointNavigation");

                    b.Navigation("IdusersNavigation");
                });

            modelBuilder.Entity("Domain.Models.Travel", b =>
                {
                    b.HasOne("Domain.Models.Group", "IdgroupNavigation")
                        .WithMany("Travels")
                        .HasForeignKey("Idgroup")
                        .IsRequired()
                        .HasConstraintName("FK_Travels_Group");

                    b.HasOne("Domain.Models.Way", "IdwayNavigation")
                        .WithMany("Travels")
                        .HasForeignKey("Idway")
                        .IsRequired()
                        .HasConstraintName("FK_Travels_Way");

                    b.Navigation("IdgroupNavigation");

                    b.Navigation("IdwayNavigation");
                });

            modelBuilder.Entity("Domain.Models.UsersGroup", b =>
                {
                    b.HasOne("Domain.Models.Group", "IdgroupNavigation")
                        .WithMany("UsersGroups")
                        .HasForeignKey("Idgroup")
                        .IsRequired()
                        .HasConstraintName("FK_UsersGroup_Group");

                    b.HasOne("Domain.Models.User", "IdusersNavigation")
                        .WithMany("UsersGroups")
                        .HasForeignKey("Idusers")
                        .IsRequired()
                        .HasConstraintName("FK_UsersGroup_Users");

                    b.Navigation("IdgroupNavigation");

                    b.Navigation("IdusersNavigation");
                });

            modelBuilder.Entity("Domain.Models.Way", b =>
                {
                    b.HasOne("Domain.Models.User", "IduserCreatorNavigation")
                        .WithMany("Ways")
                        .HasForeignKey("IduserCreator")
                        .IsRequired()
                        .HasConstraintName("FK_Way_Users");

                    b.Navigation("IduserCreatorNavigation");
                });

            modelBuilder.Entity("ListPreferencesUser", b =>
                {
                    b.HasOne("Domain.Models.PreferencesUser", null)
                        .WithMany()
                        .HasForeignKey("Idpreferences")
                        .IsRequired()
                        .HasConstraintName("FK_ListPreferencesUsers_PreferencesUsers");

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("Idusers")
                        .IsRequired()
                        .HasConstraintName("FK_ListPreferencesUsers_Users");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("Idrole")
                        .IsRequired()
                        .HasConstraintName("FK_RoleUsers_Role");

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("Idusers")
                        .IsRequired()
                        .HasConstraintName("FK_RoleUsers_Users");
                });

            modelBuilder.Entity("TypePointWay", b =>
                {
                    b.HasOne("Domain.Models.Point", null)
                        .WithMany()
                        .HasForeignKey("Idpoint")
                        .IsRequired()
                        .HasConstraintName("FK_TypePointWay_Point");

                    b.HasOne("Domain.Models.TypePoint", null)
                        .WithMany()
                        .HasForeignKey("IdtypePoint")
                        .IsRequired()
                        .HasConstraintName("FK_TypePointWay_TypePoint");
                });

            modelBuilder.Entity("WayPoint", b =>
                {
                    b.HasOne("Domain.Models.Point", null)
                        .WithMany()
                        .HasForeignKey("Idpoint")
                        .IsRequired()
                        .HasConstraintName("FK_WayPoints_Point");

                    b.HasOne("Domain.Models.Way", null)
                        .WithMany()
                        .HasForeignKey("Idway")
                        .IsRequired()
                        .HasConstraintName("FK_WayPoints_Way");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Navigation("MessageGroups");

                    b.Navigation("Travels");

                    b.Navigation("UsersGroups");
                });

            modelBuilder.Entity("Domain.Models.Point", b =>
                {
                    b.Navigation("StoryVisitUsers");
                });

            modelBuilder.Entity("Domain.Models.RatingNewsUser", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("ContactListPmIdusers2Navigations");

                    b.Navigation("ContactListPmIdusersNavigations");

                    b.Navigation("MessageListPmIdaddresseeNavigations");

                    b.Navigation("MessageListPmIdaddresserNavigations");

                    b.Navigation("RatingNewsUsers");

                    b.Navigation("StoryVisitUsers");

                    b.Navigation("UsersGroups");

                    b.Navigation("Ways");
                });

            modelBuilder.Entity("Domain.Models.Way", b =>
                {
                    b.Navigation("Travels");
                });
#pragma warning restore 612, 618
        }
    }
}
